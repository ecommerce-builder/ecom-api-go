openapi: 3.0.2
servers:
  - description: Ecom Test API Service (GAE)
    url: https://open247-gae.appspot.com
  - description: Ecom Test API Service
    url: http://localhost:8080
  - description: Ecom Test API Service Ngrok
    url: https://9e231464.ngrok.io
info:
  description: Ecom API
  version: "v0.57.0-dev"
  title: Headless Ecommerce API
  contact:
    name: Andy Fusniak
    email: andy@andyfusniak.com
paths:
  /:
    get:
      summary: Health Check
      operationId: OpHealthCheck1
      tags:
        - Misc
      responses:
        '200':
          description: Heartbeat
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'
  /healthz:
    get:
      summary: Health Check
      operationId: OpHealthCheck2
      tags:
        - Misc
      responses:
        '200':
          description: Heartbeat
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'
  /config:
    get:
      summary: Get config object
      description: |
        GetSystemConfig requires no JSON Web Token.
      operationId: GetSystemConfig
      tags:
        - Misc
      responses:
        '200':
          description: System Config object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
  /carts:
    post:
      security:
        - bearerAuth: []
      summary: Create a new shopping cart
      description: |
        OpCreateCart requires `RoleShopper` privileges.
      operationId: OpCreateCart
      tags:
        - Carts
      responses:
        '201':
          description: Cart object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/{cart_id}:
    parameters:
      - name: cart_id
        required: true
        in: path
        description: Cart ID
        schema:
          type: string
          format: uuid
          example: '30ad2997-3d19-4001-88d9-e2568d8cf720'
    get:
      security:
        - bearerAuth: []
      summary: Get a shoping cart including items
      description: |
        OpGetCart requires `RoleShopper` privileges.
      tags:
        - Carts
      responses:
        '200':
          description: Cart object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: |
            The cart with the given cart_id could not be found.
          content:
            application/json:
              schema:
                example: ''
  /carts/{cart_id}/items:
    parameters:
      - name: cart_id
        required: true
        in: path
        description: Cart ID
        schema:
          type: string
          format: uuid
          example: '30ad2997-3d19-4001-88d9-e2568d8cf720'
    post:
      security:
        - bearerAuth: []
      summary: Add an item to a cart
      description: |
        OpAddItemToCart requires `RoleShopper` privileges.
      operationId: OpAddItemToCart
      tags:
        - Carts
      requestBody:
        description: New CartItem
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCartItem'
      responses:
        '201':
          description: |
            `CartItem` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '404':
          description: |
            The cart with cart_id in the path could not be found. You should first create a cart calling the `OpCreateCart` operation and use its cart_id.
          content:
            application/json:
              example: ''
        '409':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                cart/cart-item-already-exists:
                  summary: cart/cart-item-already-exists
                  value:
                    status: 409
                    code: 'cart/cart-item-already-exists'
                    message: cart item already exists in the cart
    get:
      security:
        - bearerAuth: []
      summary: Get cart items
      description: |
        OpGetCartItems requires `RoleShopper` privileges.
      operationId: OpGetCartItems
      tags:
        - Carts
      responses:
        '200':
          description: List of CartItem objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '404':
          description: |
            The cart with cart_id in the path could not be found. You should first create a cart calling the `OpCreateCart` operation and use its cart_id.
          content:
            application/json:
              example: ''
    delete:
      security:
        - bearerAuth: []
      summary: Empty the entire cart
      description: |
        OpEmptyCartItems requires `RoleShopper` privileges.
      operationId: OpEmptyCartItems
      tags:
        - Carts
      responses:
        '204':
          description: No Content
  /carts/{cart_id}/items/{sku}:
    parameters:
      - name: cart_id
        required: true
        in: path
        description: Cart ID
        schema:
          type: string
          example: '30ad2997-3d19-4001-88d9-e2568d8cf720'
      - name: sku
        required: true
        in: path
        description: Product SKU
        schema:
          type: string
          example: 'TV-SKU'
    patch:
      security:
        - bearerAuth: []
      summary: Update a cart item with a new quantity
      description: |
        OpUpdateCartItem requires `RoleShopper` privileges.
      operationId: OpUpdateCartItem
      tags:
        - Carts
      requestBody:
        description: New quantity for cart item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItem'
      responses:
        '201':
          description: CartItem object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
    delete:
      security:
        - bearerAuth: []
      summary: Delete a cart item
      description: |
        OpDeleteCartItem requires `RoleShopper` privileges.
      operationId: OpDeleteCartItem
      tags:
        - Carts
      responses:
        '204':
          description: No Content
  /admins:
    post:
      security:
        - bearerAuth: []
      summary: Create a new administrator
      description: |
        OpCreateAdmin requires `RoleAdmin` privileges.
      operationId: OpCreateAdmin
      tags:
        - Admins
      requestBody:
        description: New administrator details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
      responses:
        '201':
          description: A customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    get:
      security:
        - bearerAuth: []
      summary: List all administrators
      description: |
        OpListAdmins requires `RoleAdmin` privileges.
      operationId: OpListAdmins
      tags:
        - Admins
      responses:
        '200':
          description: A list of customer objects
          content:
            application/json:
              schema:
                $ref: ''
    delete:
      security:
        - bearerAuth: []
      summary: Delete an administrator
      description: |
        OpDeleteAdmin requires `RoleSuperUser` privileges.
      operationId: OpDeleteAdmin
      tags:
        - Admins
      responses:
        '204':
          description: No content
  /customers:
    post:
      summary: Sign up a new customer
      description: |
        OpCreateCustomer requires no JSON Web Token.
      operationId: OpCreateCustomer
      tags:
        - Customers
      requestBody:
        description: New customer details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
      responses:
        '201':
          description: Customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    get:
      security:
        - bearerAuth: []
      summary: List all customers
      description: |
        OpListCustomers requires `RoleAdmin` privileges.
      operationId: OpListCustomers
      tags:
        - Customers
      responses:
        '200':
          description: List of Customer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /categories:
    put:
      security:
        - bearerAuth: []
      summary: Replace all categories
      description: |
        OpUpdateCatalog requires `RoleAdmin` privileges.
      operationId: OpUpdateCatalog
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryNode'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
    get:
      security:
        - bearerAuth: []
      summary: Get all categories
      description: |
        OpGetCatalog requires `RoleShopper` privileges.
      operationId: OpGetCatalog
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
    delete:
      security:
        - bearerAuth: []
      summary: Purge all categories
      description: |
        OpPurgeCatalog requires `RoleAdmin` privileges.
      operationId: OpPurgeCatalog
      tags:
        - Categories
      responses:
        '204':
          description: No Content
  /associations:
    put:
      security:
        - bearerAuth: []
      summary: Replace all product to category associations
      description: |
        OpUpdateCatalogAssocs requires `RoleAdmin` privileges.
      operationId: OpUpdateCatalogAssocs
      tags:
        - Associations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Associations'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutAssocsConflictResponse'
    get:
      security:
        - bearerAuth: []
      summary: Get all product to category associations
      description: |
        OpGetCatalogAssocs requires `RoleShopper` privileges.
      operationId: OpGetCatalogAssocs
      tags:
        - Associations
      responses:
        '200':
          description: Associations object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Associations'
    delete:
      security:
        - bearerAuth: []
      summary: Purge all product to category associations
      description: |
        OpPurgeCatalogAssocs requires `RoleAdmin` privileges.
      operationId: OpPurgeCatalogAssocs
      tags:
        - Associations
      responses:
        '204':
          description: No Content
  /customers/{customer_id}:
    get:
      security:
        - bearerAuth: []
      summary: Get a customer object
      description: |
        OpGetCustomer requires `RoleCustomer` privileges.
      operationId: OpGetCustomer
      tags:
        - Customers
      parameters:
        - name: customer_id
          required: true
          in: path
          description: Customer ID
          schema:
            type: string
            example: '53b3384b-fc35-47d1-9054-6b81f30f382e'
      responses:
        '201':
          description: Customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customer_id}/devkeys:
    parameters:
      - name: customer_id
        required: true
        in: path
        description: Customer ID
        schema:
          type: string
          example: '53b3384b-fc35-47d1-9054-6b81f30f382e'
    post:
      security:
        - bearerAuth: []
      summary: Generate a new developer key
      description: |
        OpGenerateCustomerDevKey requires `RoleCustomer` privileges.
      operationId: OpGenerateCustomerDevKey
      tags:
        - Developer Keys
      responses:
        '201':
          description: Developer Key object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevKey'
    get:
      security:
        - bearerAuth: []
      summary: List a customer's developer keys
      description: |
        OpListCustomersDevKeys requires `RoleCustomer` privileges.
      operationId: OpListCustomersDevKeys
      tags:
        - Developer Keys
      responses:
        '200':
          description: List of Developer Key objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DevKey'
  /devkeys/{dev_key_id}:
    delete:
      security:
        - bearerAuth: []
      summary: Delete a developer key
      description: |
        OpDeleteCustomerDevKey requires `RoleAdmin` privileges.
      operationId: OpDeleteCustomerDevKey
      tags:
        - Developer Keys
      parameters:
        - name: dev_key_id
          required: true
          in: path
          description: Developer Key ID
          schema:
            type: string
            example: '5a85466e-9f23-4d71-b8b7-adbfc479bb6c'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  /signin-with-devkey:
    post:
      summary: Signin with a developer key
      description: |
        OpSignInWithDevKey requires no JWT Web Token.
      operationId: OpSignInWithDevKey
      tags:
        - Developer Keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDevKeyRequest'
      responses:
        '201':
          description: Custom Token object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInDevKeyCustomToken'
  /customers/{customer_id}/addresses:
    parameters:
      - name: customer_id
        required: true
        in: path
        description: Customer ID
        schema:
          type: string
          example: '7835fa6e-38de-4959-8838-c88ab3e073b3'
    post:
      security:
        - bearerAuth: []
      summary: Add a new address for a given customer
      description: |
        OpCreateAddress requires `RoleCustomer` privileges.
      operationId: OpCreateAddress
      tags:
        - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAddress'
      responses:
        '201':
          description: Address object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    get:
      security:
        - bearerAuth: []
      summary: Get all customer addresses
      description: |
        OpGetCustomersAddresses requires `RoleCustomer` privileges.
      operationId: OpGetCustomersAddresses
      tags:
        - Addresses
      responses:
        '200':
          description: List of Address objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  /addresses/{address_id}:
    parameters:
      - name: address_id
        required: true
        in: path
        description: Address ID
        schema:
          type: string
          example: 'e3afa4f4-c5de-4e0f-8c37-5be677cfde6a'
    patch:
      security:
        - bearerAuth: []
      summary: Update an address
      description: |
        OpUpdateAddress requires `RoleCustomer` privileges.
      operationId: OpUpdateAddress
      tags:
        - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAddress'
      responses:
        '200':
          description: Address object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    get:
      security:
        - bearerAuth: []
      summary: Get an address object
      description: |
        OpGetAddress requires `RoleCustomer` privileges.
      operationId: OpGetAddress
      tags:
        - Addresses
      responses:
        '200':
          description: Address object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    delete:
      security:
        - bearerAuth: []
      summary: Delete an address object
      description: |
        OpDeleteAddress requires `RoleCustomer` privileges.
      operationId: OpDeleteAddress
      tags:
        - Addresses
      responses:
        '204':
          description: No Content
  /products/{sku}/pricing:
    parameters:
      - name: sku
        required: true
        in: path
        description: Product SKU
        schema:
          type: string
          example: 'TV-SKU'
    get:
      security:
        - bearerAuth: []
      summary: Get tier pricings for a given product
      description: |
        OpMapPricingBySKU requires `AdminShopper` privileges.
      operationId: OpMapPricingBySKU
      tags:
        - Pricing
      responses:
        '200':
          description: PricingMap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingMap'
  /products/{sku}/images:
    parameters:
      - name: sku
        required: true
        in: path
        description: Product SKU
        schema:
          type: string
          example: 'TV-SKU'
    post:
      security:
        - bearerAuth: []
      summary: Add an image to a product
      description: |
        OpAddImage requires `RoleAdmin` privileges.
      operationId: OpAddImage
      tags:
        - Images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewImage'
      responses:
        '201':
          description: Image object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
    get:
      security:
        - bearerAuth: []
      summary: List product images
      description: |
        OpListProductImages requires `RoleShopper` privileges.
      operationId: OpListProductImages
      tags:
        - Images
      responses:
        '200':
          description: List of Image objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
    delete:
      security:
        - bearerAuth: []
      summary: Delete all product images for a given product SKU
      description: |
        OpDeleteAllProductImages requires `RoleAdmin` privileges.
      operationId: OpDeleteAllProductImages
      tags:
        - Images
      responses:
        '204':
          description: No Content
  /images/{image_id}:
    parameters:
      - name: image_id
        required: true
        in: path
        description: Image ID
        schema:
          type: string
          example: '390d6786-0ff7-43e7-844b-af816589a045'
    get:
      security:
        - bearerAuth: []
      summary: Get an image by image ID
      description: |
        OpGetImage requires `RoleShopper` privileges.
      operationId: OpGetImage
      tags:
        - Images
      responses:
        '200':
          description: Image object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
    delete:
      security:
        - bearerAuth: []
      summary: Delete an image by Image ID
      description: |
        OpDeleteImage requires `RoleAdmin` privileges.
      operationId: OpDeleteImage
      tags:
        - Images
      responses:
        '204':
          description: No Content
  /products/{sku}:
    parameters:
      - name: sku
        required: true
        in: path
        description: Product SKU
        schema:
          type: string
          example: 'TV-SKU'
    put:
      security:
        - bearerAuth: []
      summary: Create or replace a product by product SKU
      description: |
        OpReplaceProduct requires `RoleAdmin` privileges.
      operationId: OpReplaceProduct
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      security:
        - bearerAuth: []
      summary: Get a product by its SKU
      description: |
        OpGetProduct requires `RoleShopper` privileges.
      operationId: OpGetProduct
      tags:
        - Products
      responses:
        '200':
          description: Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    head:
      security:
        - bearerAuth: []
      summary: Check if a product exists
      description: |
        OpProductExists requires `RoleShopper` privileges.
      operationId: OpProductExists
      tags:
        - Products
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
    delete:
      security:
        - bearerAuth: []
      summary: Delete a product by SKU
      description: |
        OpDeleteProduct requires `RoleAdmin` privileges.
      operationId: OpDeleteProduct
      tags:
        - Products
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  /products:
    get:
      security:
        - bearerAuth: []
      summary: List all products
      description: |
        OpListProducts requires `RoleShopper` privileges.
      operationId: OpListProducts
      tags:
        - Products
      responses:
        '200':
          description: Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /tiers:
    post:
      security:
        - bearerAuth: []
      summary: Add a new pricing tier
      description: |
        OpCreateTier requires `RoleAdmin` privileges.
      operationId: OpCreateTier
      tags:
        - Pricing
      responses:
        '501':
          description: Not Implemented
    get:
      security:
        - bearerAuth: []
      summary: List pricing tiers
      description: |
        OpListTiers required `RoleAdmin` privileges.
      operationId: OpListTiers
      tags:
        - Pricing
      responses:
        '501':
          description: Not Implemented
  /tiers/{tier_ref}:
    parameters:
      - name: tier_ref
        required: true
        in: path
        description: Tier Reference
        schema:
          type: string
          example: 'trade'
    put:
      security:
        - bearerAuth: []
      summary: Update a pricing tier
      description: |
        OpUpdateTier requires `RoleAdmin` privileges.
      operationId: OpUpdateTier
      tags:
        - Pricing
      responses:
        '501':
          description: Not Implemented
    get:
      security:
        - bearerAuth: []
      summary: Get a pricing tier by tier reference
      description: |
        OpGetTier requires `RoleShopper` privileges.
      operationId: OpGetTier
      tags:
        - Pricing
      responses:
        '501':
          description: Not Implemented
    delete:
      security:
        - bearerAuth: []
      summary: Delete a pricing tier
      description: |
        OpDeleteTier requires `RoleAdmin` privileges.
      operationId: OpDeleteTier
      tags:
        - Pricing
      responses:
        '501':
          description: Not Implemented
  /products/{sku}/tiers/{tier_ref}/pricing:
    put:
      security:
        - bearerAuth: []
      summary: Update a product pricing by product SKU and pricing tier reference
      description: |
        OpUpdateTierPricing requires `RoleAdmin` privileges.
      operationId: OpUpdateTierPricing
      tags:
        - Pricing
      parameters:
        - name: sku
          required: true
          in: path
          description: Product SKU
          schema:
            type: string
            example: 'TV-SKU'
        - name: tier_ref
          required: true
          in: path
          description: Pricing tier reference
          schema:
            type: string
            example: 'default'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePricing'
      responses:
        '200':
          description: Pricing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pricing'
    get:
      security:
        - bearerAuth: []
      summary: Get a product pricing by product SKU and pricing tier reference
      description: |
        OpGetTierPricing requires `RoleShopper` privileges.
      operationId: OpGetTierPricing
      tags:
        - Pricing
      parameters:
        - name: sku
          required: true
          in: path
          description: Product SKU
          schema:
            type: string
            example: 'TV-SKU'
        - name: tier_ref
          required: true
          in: path
          description: Pricing tier reference
          schema:
            type: string
            example: 'default'
      responses:
        '200':
          description: Pricing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pricing'
    delete:
      security:
        - bearerAuth: []
      summary: Delete a product pricing by product SKU and pricing tier reference
      description: |
        OpDeleteTierPricing requires `RoleAdmin` privileges.
      operationId: OpDeleteTierPricing
      tags:
        - Pricing
      parameters:
        - name: sku
          required: true
          in: path
          description: Product SKU
          schema:
            type: string
            example: 'TV-SKU'
        - name: tier_ref
          required: true
          in: path
          description: Pricing tier reference
          schema:
            type: string
            example: 'default'
      responses:
        '204':
          description: No Content
  /products/tiers/{tier_ref}/pricing:
    get:
      security:
        - bearerAuth: []
      summary: Get all product pricings for a given tier
      description: |
        OpMapPricingByTier requires `RoleShopper` privileges.
      operationId: OpMapPricingByTier
      tags:
        - Pricing
      parameters:
        - name: tier_ref
          required: true
          in: path
          description: Pricing tier reference
          schema:
            type: string
            example: 'default'
      responses:
        '200':
          description: PricingMap object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingMap'
  /orders:
    post:
      security:
        - bearerAuth: []
      summary: Place an guest or customer order
      description: |
        OpPlaceOrder requires `RoleShopper` privileges.
      operationId: OpPlaceOrder
      tags:
        - Orders
      requestBody:
        description: Order to place in the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                cart/cart-item-already-exists:
                  summary: validate/invalid-request-body
                  value:
                    status: 409
                    code: 'validate/invalid-request-body'
                    message: For placing guest orders set both contact_name and email
  /sysinfo:
    get:
      security:
        - bearerAuth: []
      summary: Get system information
      description: |
        OpSystemInfo requires `RoleAdmin` privileges.
      operationId: OpSystemInfo
      tags:
        - Misc
      responses:
        '200':
          description: System info object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Cart:
      type: object
      properties:
        object:
          type: string
          example: 'cart'
        id:
          type: string
          example: '30ad2997-3d19-4001-88d9-e2568d8cf720'
        locked:
          type: string
          example: false
        created:
          type: string
          format: date-time
          example: '2019-08-02T12:02:42.217936Z'
        modified:
          type: string
          format: date-time
          example: '2019-08-02T12:02:42.217936Z'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        object:
          type: string
          example: 'cart_item'
        id:
          type: string
          example: '69186b07-075f-42b9-b5cb-d66d9addabf1'
        sku:
          type: string
          example: 'TV-SKU'
        name:
          type: string
          example: 'LCD TV System'
        qty:
          type: integer
          example: 5
        unit_price:
          type: integer
          example: 2066250
        created:
          type: string
          format: date-time
          example: '2019-08-01T15:37:32.269875Z'
        modified:
          type: string
          format: date-time
          example: '2019-08-01T15:37:32.269875Z'
    UpdateCartItem:
      type: object
      required:
        - qty
      properties:
        qty:
          type: integer
          example: 3
    NewCartItem:
      type: object
      required:
        - sku
        - qty
      properties:
        sku:
          type: string
          example: 'TV-SKU'
        qty:
          type: integer
          example: 2
    NewCustomer:
      type: object
      required:
        - email
        - password
        - firstname
        - lastname
      properties:
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        password:
          type: string
          example: 'Xxaks9SfmcT5avBR'
        firstname:
          type: string
          example: 'John'
        lastname:
          type: string
          example: 'Doe'
    Customer:
      type: object
      required:
        - id
        - uid
        - role
        - email
        - firstname
        - lastname
        - created
        - modified
      properties:
        id:
          type: string
          format: uuid
          example: '53b3384b-fc35-47d1-9054-6b81f30f382e'
        uid:
          type: string
        role:
          type: string
          example: 'eocNauyyf3WchJG6WRWXePEqbTE2'
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        firstname:
          type: string
          example: 'John'
        lastname:
          type: string
          example: 'Doe'
        created:
          type: string
          format: date-time
          example: '2019-07-30 14:23:31.756204Z'
        modified:
          type: string
          format: date-time
          example: '2019-07-30 14:23:31.756204Z'
    DevKey:
      type: object
      required:
        - object
        - id
        - key
        - customer_id
        - created
        - modified
      properties:
        object:
          type: string
          example: 'developer_key'
        id:
          type: string
          example: '5a85466e-9f23-4d71-b8b7-adbfc479bb6c'
        key:
          type: string
        customer_id:
          type: string
          example: '5a85466e-9f23-4d71-b8b7-adbfc479bb6c'
        created:
          type: string
          format: date-time
          example: '2019-07-31T14:36:13.595972Z'
        modified:
          type: string
          format: date-time
          example: '2019-07-31T14:36:13.595972Z'
    SignInDevKeyRequest:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          example: '2Pb3bNxw3PDBEJ8U6hf7mLVgrYBhP8exZBA6xJDSh2zQ'
    SignInDevKeyCustomToken:
      type: object
      required:
        - custom_token
      properties:
        custom_token:
          type: string
          example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJmaXJlYmFzZS1hZG1pbnNkay1xbGwzaEB0ZXN0LWRhdGEtb2FrLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwiYXVkIjoiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vZ29vZ2xlLmlkZW50aXR5LmlkZW50aXR5dG9vbGtpdC52MS5JZGVudGl0eVRvb2xraXQiLCJleHAiOjE1NjQ2MTU1NzYsImlhdCI6MTU2NDYxMTk3Niwic3ViIjoiZmlyZWJhc2UtYWRtaW5zZGstcWxsM2hAdGVzdC1kYXRhLW9hay5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInVpZCI6IkFIeXJWTUZ5cEdOOVJ1VDF3R0VlcmtvcEdybjEifQ.nIUsoOqfSBZuiYM9oWCwLAg9EGiudjYcgN5xEdn-8fN_SXlEOd3zf0COpA2d8R-Bk3WPD2l-EjMwVg4FH3Wefq8_TTbI_N1d4Ih3e-ksvlsvw-PP8Rye9yx58hEojmSsVk7FccBtvW8upl-GSa2j_sfRT4Sfaa9u1WmUdjMu_-wosZDYnDlMs1p73KN6Fq6NizsfcDVSWDDi3kzLg1ROI8kcqPE_O2N33e8Tm2mgfd9SXQL5XlpbuF963qqvLgq--0fQ37r-7Med2m_emfG93ZhsqYzIlBgSx3EgaZ_msW_Cia37d5UApqvR2RH0udzjRpXvN4Evh3CiSnC696oIeQ","customer":{"id":"7835fa6e-38de-4959-8838-c88ab3e073b3","uid":"AHyrVMFypGN9RuT1wGEerkopGrn1","role":"root","email":"andy+root@andyfusniak.com","firstname":"Andy","lastname":"Fusniak","created":"2019-07-31T14:36:02.918471Z","modified":"2019-07-31T14:36:02.918471Z"}}'
    NewOrder:
      type: object
      required:
        - customer
        - billing_address
        - shipping_address
      properties:
        cart_id:
          type: string
          format: uuid
          example: '33ed8b80-3ba7-4f31-9364-2559a83258a7'
        customer:
          type: object
          properties:
            contact_name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        billing_address:
            $ref: '#/components/schemas/NewAddress'
        shipping_address:
            $ref: '#/components/schemas/NewAddress'
    Order:
      properties:
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/Address'
    NewAddress:
      required:
        - typ
        - contact_name
        - addr1
        - city
        - county
        - postcode
        - country
      properties:
        typ:
          type: string
          enum: [shipping, billing]
          example: 'billing'
        contact_name:
          type: string
          example: John Doe
        addr1:
          type: string
          example: '456 The Road'
        addr2:
          type: string
          example: 'Park Lane'
        city:
          type: string
          example: 'Cambridge'
        postcode:
          type: string
          example: 'CB1 9ZZ'
        country:
          type: string
          example: 'GB'
    Address:
      required:
        - object
        - id
        - typ
        - contact_name
        - addr1
        - city
        - county
        - postcode
        - country
        - created
        - modified
      properties:
        object:
          type: string
          example: 'billing'
        id:
          type: string
          format: uuid
          example: 'c7c9ff19-4bc9-4953-a1bd-9dee0b41b4fe'
        typ:
          type: string
          enum: [shipping, billing]
          example: 'billing'
        contact_name:
          type: string
          example: John Doe
        addr1:
          type: string
          example: '456 The Road'
        addr2:
          type: string
          example: 'Park Lane'
        city:
          type: string
          example: 'Cambridge'
        postcode:
          type: string
          example: 'CB1 9ZZ'
        country:
          type: string
          example: 'GB'
        created:
          type: string
          format: date-time
          example: '2019-06-26T10:26:14.047Z'
        modified:
          type: string
          format: date-time
          example: '2019-06-26T10:26:14.047Z'
    AssocProduct:
      properties:
        sku:
          type: string
          example: 'NCIP9WFBB'
        created:
          type: string
          format: date-time
          example: '2019-07-30T13:57:23.269373Z'
        modified:
          type: string
          format: date-time
          example: '2019-07-30T13:57:23.269373Z'
    Associations:
      type: object
      additionalProperties:
        type: object
        properties:
          products:
            type: array
            items:
              $ref: '#/components/schemas/AssocProduct'
    Categories:
      properties:
        segment:
          type: string
          example: 'wireless-cctv'
        name:
          type: string
          example: 'Wireless CCTV'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Categories'
    CategoryNode:
      required:
        - segment
        - name
        - categories
      properties:
        segment:
          type: string
          example: 'wireless-cctv'
        name:
          type: string
          example: 'Wireless CCTV'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryNode'
    PricingMap:
      type: object
      additionalProperties:
        type: object
        properties:
          unit_price:
            type: integer
            example: 2066250
          created:
            type: string
            format: date-time
            example: '2019-07-31T17:03:17.673329Z'
          modified:
            type: string
            format: date-time
            example: '2019-07-31T17:03:17.673329Z'
    Pricing:
      required:
        - object
        - sku
        - tier_ref
        - unit_price
        - created
        - modified
      properties:
        object:
          type: string
          example: 'pricing'
        sku:
          type: string
          example: 'TV-SKU'
        tier_ref:
          type: string
          example: 'default'
        unit_price:
          type: integer
          example: 2066250
        created:
          type: string
          format: date-time
          example: '2019-07-30T13:57:23.289157Z'
        modified:
          type: string
          format: date-time
          example: '2019-07-31T15:27:15.536449Z'
    UpdatePricing:
      required:
        - unit_price
      properties:
        unit_price:
          type: integer
          minimum: 0
          example: 2066250
    Image:
      required:
        - object
        - id
        - sku
        - path
        - gsurl
        - width
        - height
        - size
        - created
        - modified
      properties:
        object:
          type: string
          example: 'image'
        id:
          type: string
          example: 'e2a1b7ff-a00a-4d7c-a2dd-86e8ea749ed1'
        sku:
          type: string
          example: 'USB32GBSP'
        path:
          type: string
          example: '4439.jpg'
        gsurl:
          type: string
          example: 'gs://4439.jpg'
        width:
          type: integer
          minimum: 0
          example: 999999
        height:
          type: integer
          minimum: 0
          example: 999999
        size:
          type: integer
          minimum: 0
          example: 0
        created:
          type: string
          format: date-time
          example: '2019-07-30T14:31:47.672541Z'
        modified:
          type: string
          format: date-time
          example: '2019-07-30T14:31:47.672541Z'
    NewImage:
      required:
        - path
      properties:
        path:
          type: string
          example: 'images/products/namwa1.jpg'
    NewProduct:
      required:
        - ean
      properties:
        ean:
          type: string
          example: '5060181650666'
    ProductContent:
      required:
        - meta
        - videos
        - manuals
        - software
        - description
        - specification
        - in_the_box
      properties:
        meta:
          type: object
          required:
            - title
            - description
          properties:
            title:
              type: string
            description:
              type: string
        videos:
          type: string
        manuals:
          type: string
        software:
          type: string
        description:
          type: string
        in_the_box:
          type: string
    Product:
      required:
        - object
        - sku
        - path
        - name
        - images
        - pricing
        - content
        - created
        - modified
      properties:
        object:
          type: string
          example: 'product'
        sku:
          type: string
          example: 'TV-SKU'
        path:
          type: string
          example: 'usb-receiver-cctv-wireless-infrared-day-night-hidden-spy-camera-system'
        name:
          type: string
          example: 'Green Feathers Wireless Bird Box Camera & USB Recording Kit'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        pricing:
          type: object
        content:
          $ref: '#/components/schemas/ProductContent'
    SystemConfig:
      properties:
        object:
          type: string
          example: 'config'
        ECOM_FIREBASE_PROJECT_ID:
          type: string
          example: 'test-data-oak'
        ECOM_FIREBASE_WEB_API_KEY:
          type: string
          example: 'AIzaSyDlPXxufb303i4e7fDV9fiURU05lQeX9Kc'
    SystemInfo:
      properties:
        api_version:
          type: string
          example: 'v0.57.0'
        env:
          type: object
          properties:
            pg:
              type: object
              properties:
                ECOM_PG_HOST:
                  type: string
                  example: 'localhost'
                ECOM_PG_PORT:
                  type: string
                  example: '5432'
                ECOM_PG_DATABASE:
                  type: string
                  example: 'ecom_dev'
                ECOM_PG_USER:
                  type: string
                  example: 'postgres'
                ECOM_PG_SSLMODE:
                  type: string
                  example: 'disable'
                schema_version:
                  type: string
                  example: 'v0.57.0'
            google:
              type: object
              properties:
                ECOM_GAE_PROJECT_ID:
                  type: string
                  example: 'open247-gae'
            firebase:
              type: object
              properties:
                ECOM_FIREBASE_PROJECT_ID:
                  type: string
                  example: 'test-data-oak'
                ECOM_FIREBASE_WEB_API_KEY:
                  type: string
                  example: 'AIzaSyDlPXxufb303i4e7fDV9fiURU05lQeX9Kc'
            app:
              type: object
              properties:
                PORT:
                  type: string
                  example: '8080'
                ECOM_APP_ROOT_EMAIL:
                  type: string
                  example: 'andy+root@andyfusniak.com'
    ErrorResponse:
      properties:
        status:
          type: integer
          example: 409
        code:
          type: string
          example: "assocs/assocs-already-exists"
        message:
          type: string
          example: "catalog associations already exist"
    PutAssocsConflictResponse:
      properties:
        status:
          type: integer
          example: 409
        code:
          type: string
          example: "assocs/assocs-already-exists"
        message:
          type: string
          example: "catalog associations already exist"
        data:
          type: object
          properties:
            missing_paths:
              type: array
              items:
                type: string
            non_leaf_paths:
              type: array
              items:
                type: string
            missing_skus:
              type: array
              items:
                type: string
